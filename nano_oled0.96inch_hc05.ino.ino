//Made by:  (c)  Thunderbolt1003USA
//Github Profile:https://github.com/thunderbolt1003usa
//Github Repo:   https://github.com/thunderbolt1003usa/BT-Terminal
//Homepage:      https://thunderbolt1003usa.github.io
//
// You are allowed to use ,copy ,modify or distribute this code 
// but you're not allowed to sell this code(make money) ,patent it or do illegal things with it.

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

String buffer = "";

// 'bitmap', 128x64px
const unsigned char thunderbolt1003usabitmap [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xfe, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 
	0xff, 0xff, 0x9f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf3, 0xff, 0xff, 
	0xff, 0xfe, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0xff, 0xff, 
	0xff, 0xf9, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x3f, 0xff, 
	0xff, 0xf7, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 
	0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 
	0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 
	0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 
	0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 
	0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
	0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 
	0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 
	0xef, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 
	0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 
	0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 
	0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 
	0xb0, 0xcf, 0xff, 0xff, 0x3f, 0xff, 0xcf, 0xff, 0x9f, 0xff, 0x7c, 0xf3, 0xc3, 0x37, 0x1f, 0x7b, 
	0xb0, 0xef, 0xff, 0xff, 0xbf, 0xff, 0xef, 0xff, 0xdf, 0x7e, 0x7a, 0xf5, 0xd9, 0x36, 0xee, 0x7b, 
	0x79, 0xef, 0xff, 0xff, 0xbf, 0xff, 0xef, 0xff, 0xdf, 0x7c, 0x77, 0x6e, 0xf9, 0x36, 0xee, 0xbd, 
	0x79, 0xeb, 0xb6, 0x4f, 0x3c, 0x74, 0xe3, 0xc7, 0xde, 0x1f, 0x75, 0x6a, 0xe3, 0x37, 0x9d, 0xdd, 
	0x79, 0xe5, 0xb7, 0x6e, 0xbb, 0xb2, 0x69, 0xbb, 0xdf, 0x7f, 0x75, 0x6a, 0xf9, 0x37, 0x9c, 0x1d, 
	0x79, 0xed, 0xb7, 0x6d, 0xb8, 0x32, 0x6d, 0xbb, 0xdf, 0x7f, 0x77, 0x6e, 0xf9, 0x36, 0xed, 0xdd, 
	0x79, 0xed, 0xb7, 0x6d, 0xbb, 0xb3, 0xed, 0xbb, 0xdf, 0x4f, 0x7a, 0xf5, 0xd9, 0x36, 0xed, 0xdd, 
	0x79, 0xcd, 0x93, 0x6e, 0x5c, 0x73, 0xe1, 0xc7, 0x8f, 0x9c, 0x3c, 0xf3, 0xc3, 0x87, 0x1d, 0xdd, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 
	0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 
	0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 
	0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 
	0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 
	0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 
	0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 
	0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 
	0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xbf, 
	0xfd, 0xff, 0xff, 0x87, 0x00, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0x7f, 
	0xfe, 0xff, 0xff, 0xbb, 0xef, 0xff, 0xbf, 0xff, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xff, 0xfe, 0xff, 
	0xff, 0x7f, 0xff, 0xbb, 0xe7, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xfd, 0xff, 
	0xff, 0xbf, 0xff, 0xbb, 0xf7, 0xff, 0xbe, 0x34, 0x5a, 0x76, 0x9c, 0x77, 0xff, 0xff, 0xfb, 0xff, 
	0xff, 0xcf, 0xff, 0x87, 0xf7, 0xff, 0xbd, 0xd3, 0x41, 0x76, 0x5b, 0x77, 0xff, 0xff, 0xe7, 0xff, 
	0xff, 0xf7, 0xff, 0xb9, 0xf7, 0x0f, 0xbd, 0x37, 0x4b, 0xb6, 0xe3, 0x77, 0xff, 0xff, 0xdf, 0xff, 
	0xff, 0xf9, 0xff, 0xbd, 0xf7, 0xff, 0xb8, 0xf7, 0xdb, 0xb6, 0xf7, 0x77, 0xff, 0xff, 0x3f, 0xff, 
	0xff, 0xfe, 0x7f, 0xbb, 0xf7, 0xff, 0xbd, 0xd7, 0xdd, 0xb6, 0xeb, 0x37, 0xff, 0xfc, 0xff, 0xff, 
	0xff, 0xff, 0x9f, 0x87, 0xf7, 0xff, 0xbe, 0x37, 0xdd, 0xb6, 0xe8, 0xb7, 0xff, 0xf3, 0xff, 0xff, 
	0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int thunderbolt1003usaallArray_LEN = 1;
const unsigned char* thunderbolt1003usaallArray[1] = {
	thunderbolt1003usabitmap
};

// ⏳ Timeout-Tracking
unsigned long lastActivityTime = millis(); // Zeitpunkt der letzten Aktivität
const unsigned long timeoutDuration = 30000; // 10 Sekunden

int ballX = random(0, 125);
int ballY = random(0, 61);
int dx = 1;
int dy = 1;

const unsigned char starBitmap[] PROGMEM = {
  0x10, //    █
  0x54, //  █ █ █
  0x38, //   ███
  0x7C, //  █████
  0x38, //   ███
  0x54, //  █ █ █
  0x10, //    █
  0x00  
};

void setup() {
  // OLED initialisieren
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    while (true) { /* bleibt hier hängen, falls kein Display */ }
  }

  display.clearDisplay();
  display.drawBitmap(0, 0, thunderbolt1003usabitmap, 128, 64, SSD1306_WHITE); // Bitmap anzeigen
  display.display();
  delay(5000); // Anzeige für 2 Sekunden

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("_");
  display.display();

  // Hardware-Serial (Bluetooth) starten
  Serial.begin(9600);
}

void loop() {
	bool activity = false;
  // Empfange Zeichen über HC-05
  while (Serial.available()) {
    activity = true;
    byte c = Serial.read();

    if (c >= 1 && c <= 5) {
      display.setTextSize(c); // Rest überspringen
      display.clearDisplay();       // Anzeige löschen
      display.setCursor(0, 0);      // Cursor zurücksetzen
      display.println(buffer);      // Aktuellen Text nochmal anzeigen
      display.display();            // Display aktualisieren
    return;

    }

    else if (c == '\n') {
      // Vollständige Zeile angekommen → Display aktualisieren
      display.clearDisplay();
      display.setCursor(0, 0);
      display.println(buffer);
      display.display();
      buffer = "";
    }
    else {
      buffer += (char)c;
    }
  }
	if (activity) {
    lastActivityTime = millis();
  }
  // Prüfe auf Inaktivität
  if (millis() - lastActivityTime > timeoutDuration) {

		ballX += dx;
    ballY += dy;

		// Rand-Kollision
  if (ballX <= 0 || ballX >= 125) dx *= -1;
  if (ballY <= 0 || ballY >= 61) dy *= -1;

    display.clearDisplay();
    display.drawBitmap(0, 0, thunderbolt1003usabitmap, 128, 64, SSD1306_WHITE);
		// Ball drüberzeichnen
    display.drawBitmap(ballX, ballY, starBitmap, 8, 8, SSD1306_BLACK);
    display.display();
		delay(20);

    //lastActivityTime = millis(); // damit Bitmap nicht ständig neu gezeichnet wird
  }
}
